package com.hywa.bigdata.storage.controller;

import com.hywa.bigdata.storage.common.AjaxJson;
import com.hywa.bigdata.storage.common.ContextHolderUtils;
import com.hywa.bigdata.storage.common.ListKit;
import com.hywa.bigdata.storage.common.redis.RedisUser;
import com.hywa.bigdata.storage.controller.validate.workFlowValidate.*;
import com.hywa.bigdata.storage.entity.*;
import com.hywa.bigdata.storage.entity.constant.ConstantMap;
import com.hywa.bigdata.storage.entity.inheritEntity.InheritOrderdetail;
import com.hywa.bigdata.storage.service.*;
import com.hywa.bigdata.storage.validate.JsonValidate;
import org.activiti.engine.RuntimeService;
import org.activiti.engine.TaskService;
import org.activiti.engine.task.Task;
import org.activiti.engine.task.TaskInfoQuery;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.util.StringUtils;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import javax.validation.Valid;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

//整个流程的办理过程
@RestController
@RequestMapping("workFlow")
public class WorkFlowController {

	@Autowired
	RedisUser redisUser;

	@Autowired
	RuTaskNodeInfoService ruTaskNodeInfoService;

	@Autowired
	RuOrderHandleDesigningService ruOrderHandleDesigningService;

	@Autowired
	RuOrderFieldDesigningService ruOrderFieldDesigningService;

	@Autowired
	OrderdetailService orderdetailService;

	@Autowired
	ActivitiService activitiService;

	@Autowired
	TaskService taskService;

	@Autowired
	WorkFlowService workFlowService;

	@Autowired
	RuntimeService runtimeService;

	@Autowired
	BaseProcessInfoService baseProcessInfoService;

	@Autowired
	SysUserService sysUserService;

	@Autowired
	HiOrderHandleDesigningService hiOrderHandleDesigningService;

	@Autowired
	HiOrderFieldDesigningService hiOrderFieldDesigningService;

	@Autowired
	HiTaskNodeInfoService hiTaskNodeInfoService;

	@Value("${business_url}")
	private String business_url;

	// 点击新增时根据菜单位置,查询流程id taskId 和具体的自定义表单
	@RequestMapping("orderSaveWin")
	@JsonValidate(OrderSaveValidate.class)
	public AjaxJson orderSaveWin(String menuPosition) {
		User user = redisUser.getUser();
		// 根据当前人和业务信息查询新增订单的字段
		RuTaskNodeInfo taskNodeInfo = ruTaskNodeInfoService.findByMenuPosition(menuPosition);
		Map<String, Object> map = new HashMap<>();
		findModule(map, taskNodeInfo.getId());
		map.put("processId", taskNodeInfo.getProcessId());
		map.put("userInfo", user);
		return new AjaxJson(map);
	}

	// 点击办理(根据taskId查询对应的信息)
	@RequestMapping("orderCompileWin")
	@JsonValidate(OrderCompileWinValidate.class)
	public AjaxJson orderCompileWin(String id) {
		User user = redisUser.getUser();
		Orderdetail orderdetailInfo = orderdetailService.findById(id, new Orderdetail());
		// 此处查询历史信息
		Map<String, Object> map = new HashMap<>();
		if (null != orderdetailInfo) {
			map = findModule(map, orderdetailInfo.getTaskId());
			if (ListKit.isEmpty((List<OrderFieldDesigning>) map.get("orderFieldDesigning"))) {
				List<HiOrderFieldDesigning> orderFieldDesigning = hiOrderFieldDesigningService
						.findOrderFieldDesigning(orderdetailInfo.getTaskId());
				List<HiOrderHandleDesigning> orderHandleDesigning = hiOrderHandleDesigningService
						.findOrderHandleDesigning(orderdetailInfo.getTaskId());
				map.put("orderFieldDesigning", orderFieldDesigning);
				map.put("orderHandleDesigning", orderHandleDesigning);
			}
			orderdetailInfo.setOperator(sysUserService.findRealNameById(orderdetailInfo.getOperator()));
			map.put("orderdetailInfo", orderdetailInfo);
			map.put("userInfo", user);
		}
		return new AjaxJson(map);
	}

	// 保存订单数据(直接update---一个流程对应一个orderdetail)
	@RequestMapping(value = "saveOrderdetail", method = RequestMethod.POST)
	@JsonValidate(SaveOrderdetailValidate.class)
	public AjaxJson saveOrderdetail(@Valid InheritOrderdetail orderdetail, BindingResult bindingResult)
			throws ParseException {
		User user = redisUser.getUser();
		return workFlowService.saveOrderdetail(orderdetail, user);
	}

	// 审核订单数据
	// 需要先修改在进行操作
	@RequestMapping(value = "checkOrderdetail", method = RequestMethod.POST)
	@JsonValidate(CheckOrderdetailValidate.class)
	public AjaxJson checkOrderdetail(@RequestBody Orderdetail orderdetail) {
		User user = redisUser.getUser();
		return workFlowService.checkOrderdetail(orderdetail, user);
	}

	// 查询责任人当前任务(分页查询)--此处根据任务信息查询k-v值
	// 此处存在条件查询(Orderdetail)优化节点图显示
	@RequestMapping("userTask")
	public AjaxJson userTask(Orderdetail orderdetail, @RequestParam(defaultValue = "1") int page,
			@RequestParam(name = "pageSize", defaultValue = "10") int rows, String menuPosition) {
		User user = redisUser.getUser();
		// 记录查出的总数量
		AjaxJson ajaxJson = new AjaxJson();
		// 第一个节点无法改变,可以用这个方法来作为当前步骤查询
		if (null == orderdetail)orderdetail = new Orderdetail();
		if (!StringUtils.isEmpty(orderdetail.getCurrentStep()) && orderdetail.getCurrentStep().contains(":")) {
			orderdetail.setCurrentStep(orderdetail.getCurrentStep().split(":")[0]);
		}
		List<Task> tasks = taskService.createTaskQuery().taskCandidateGroup(user.getId()).list();
		tasks.addAll(taskService.createTaskQuery().taskCandidateGroup(user.getRefSysDepartment()).list());
		tasks= tasks.stream().distinct().collect(Collectors.toList()); 
		List<Map<String, Object>> list = workFlowService.userTask(page, rows, ajaxJson, orderdetail, tasks, user,
				menuPosition);
		List<Map<String, Object>> lists = ListKit.orderSort(page, rows, list);
		ajaxJson.setData(lists);
		return ajaxJson;
	}

	// 查询当前责任人的需处理任务数与今日完成的
	@RequestMapping("countUserTask")
	public AjaxJson countUserTask() {
		// 通过accessToken获得用户信息
		User user = redisUser.getUser();
		Map<String, Object> admin = new HashMap<>();
		Map<String, Map<String, Object>> map = new HashMap<>();
		admin = orderdetailService.adminUserTask();
		Map<String, Object> product = new HashMap() {{
            put("PickingOutHouse", 0);
            put("ProductionInHouse", 0);
            put("PurchaseInHouse", 0);
            put("SalesReturnInHouse", 0);
            put("SellOutHouse", 0);
        }};
		// 待审核的信息
		orderdetailService.findUnfinished(user).forEach(stringIntegerMap -> {
			if (!StringUtils.isEmpty(ConstantMap.OUTANDINPARAMS.get(((String) stringIntegerMap.get("auditType"))))) {
				product.put(ConstantMap.OUTANDINPARAMS.get((String) stringIntegerMap.get("auditType")),
						stringIntegerMap.get("num"));
			}
		});
		// 五个流程节点的信息
		map.put("admin", admin);
		map.put("user", orderdetailService.findAllCheckPendingOrder(product));
		return new AjaxJson(map);
	}

	// 审核删除
	@RequestMapping("auditDelete")
	@JsonValidate(AuditDeleteValidate.class)
	public AjaxJson auditDelete(Orderdetail orderdetail) {
		User user = redisUser.getUser();
		return workFlowService.auditDelete(orderdetail, user);
	}

	// 删除流程字段并且中断流程,还需判断当前状态0,1,3直接删 2审核再删
	@RequestMapping("delOrderdetail")
	@JsonValidate(DelOrderdetailValidate.class)
	public AjaxJson delOrderdetail(String id) {
		return workFlowService.delOrderdetail(id);
	}

	// 当前步骤
	@RequestMapping("findNodeInfoByProcessId")
	@JsonValidate(FindNodeInfoByProcessIdValidate.class)
	public AjaxJson findNodeInfoByProcessId(String processId) {
		List<String> taskNodeInfos = hiTaskNodeInfoService.findCurrentStep(processId);
		List<Map<String, Object>> list = new ArrayList<>();
		taskNodeInfos.forEach(a -> {
			Map<String, Object> map = new HashMap<>();
			map.put("currentStep", a);
			list.add(map);
		});
		return new AjaxJson(list);
	}

	// 操作人员
	@RequestMapping("findOperatorAll")
	@JsonValidate(FindNodeInfoByProcessIdValidate.class)
	public AjaxJson findOperatorAll(String processId) {
		return new AjaxJson(orderdetailService.findOperatorAll(processId));
	}

	// 查询所有组件信息
	private Map<String, Object> findModule(Map<String, Object> map, String id) {
		List<RuOrderFieldDesigning> orderFieldDesigning = ruOrderFieldDesigningService.findOrderFieldDesigning(id);
		List<RuOrderHandleDesigning> orderHandleDesigning = ruOrderHandleDesigningService.findOrderHandleDesigning(id);
		map.put("orderFieldDesigning", orderFieldDesigning);
		map.put("orderHandleDesigning", orderHandleDesigning);
		return map;
	}
}
